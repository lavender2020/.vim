set mouse=a
set ruler
set term=xterm-256color
color fruit
color camo
color desertEx

" when using a projector, use a light color scheme and no syntax
function Pres ()
  :colorscheme dawn
  :syntax off
endfunction
map <Leader>pres :call Pres()<CR>

function Pref ()
  :syntax enable
  :set background=dark
  :let g:solarized_termcolors=256
  :colorscheme solarized
endfunction
map <Leader>pref :call Pref()<CR>

set nohls
set hls
noremap <Leader><Space> :noh<CR>:call clearmatches()<CR>

" map <Leader>. :tabn<CR>

" this makes it use the system clipboard
" whenever yanking to the "unnamed" register.
set clipboard=unnamed

set wrap
set modelines=0
set tabstop=2
set expandtab
set softtabstop=2
set shiftwidth=2
set expandtab
set wildmenu
set showmatch
set lazyredraw
set cul
set nocul
set ttyfast
set autoindent
set showmode
set showcmd
set visualbell
nnoremap / /\v
vnoremap / /\v
if exists("&colorcolumn")
  set colorcolumn=80
endif
nnoremap j gj
nnoremap k gk

" make xX use the "x" register, rather than the default register
" d already deletes and yanks to the default register
noremap x "xx
noremap X "xX

" make cC yank to the "c" register.
" it's rare that you want to correct and then re-paste, but possible.
noremap c "cc
noremap C "cC

" this bit makes Q, W and WQ work just like their lowercase counterparts
com -bang Q q<bang>
com -bang W w<bang> <args>
com -bang WQ wq<bang> <args>
com -bang Wq wq<bang> <args>

" super annoying typos if you maintain a pacakge manager
iab pacakges packages
iab pacakge package
iab verison version
iab verisons versions
iab nodE_modules node_modules
iab teh the
iab hte the
iab wiht with
iab eaisly easily
iab ofr for

" shift to move the window, not the cursor.
inoremap JJJJ <Esc><C-e><C-e><C-e>
inoremap KKKK <Esc><C-y><C-y><C-y>
inoremap HHHH <Esc>zhzhzhzhzhzh
inoremap LLLL <Esc>zlzlzlzlzlzl
map J <C-e>
map K <C-y>
map H zhzh
map L zlzl

" control to switch windows
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l

" f1, you are my nemesis.
map <F1> <Esc>
imap <F1> <Esc>

" escape is so far away
noremap <Leader>m <Esc>
inoremap <Leader>m <Esc>
noremap kj <Esc>
inoremap kj <Esc>

" Fast saving
cmap w!! w !sudo tee > /dev/null %
nmap <Leader>w :w!<cr>
nmap .<Leader> :wq!<cr>

" ------------------------------------------------------------------------------
" snipmate
" ------------------------------------------------------------------------------
" Configure snipmate dir
let g:snippets_dir="~/.vim/snippets"

" ------------------------------------------------------------------------------
" File type specifics *
" ------------------------------------------------------------------------------
" Go
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" Do not create swap files, we're using git after all
set nobackup
set nowritebackup
set noswapfile

" CtrlP
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_dont_split = 'NERD_tree_2'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_mruf_relative = 1
nmap <Leader>p :CtrlPMRU<CR>

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F4> :YcmDiags<CR>

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" split
nnoremap <leader>h :split<enter>
nnoremap <leader>v :vsplit<enter>

" autopair
let g:AutoPairsMultilineClose=0